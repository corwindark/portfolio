[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Financial Markets",
    "section": "",
    "text": "Selected Projects\n[Button Click]   [Button Hover] \n  \n\n\ntest\ntest{.btn .btn-outline-primary .height;100px}\ntest{.btn .btn-outline-primary height:100px}\ntest\ntest{.btn .btn-outline-primary .btn-height=100px}\ntest\n\nMetalearning in Time Series Ensembles\n\n\n\n\n\nCan we use deep learning models to identify market conditions where particular statistical models are more effective? Such that the overall performance of a simple statistical ensemble will increase?\n\n\n\n\n\nxyz chart"
  },
  {
    "objectID": "dlensembling.html",
    "href": "dlensembling.html",
    "title": "Metalearning in Time Series Ensembles",
    "section": "",
    "text": "Get Hourly SPY Data Since 1/1/22\n\nimport yfinance as yf\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as plt\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\n\n\n\ndata = yf.download('SPY','2022-01-01','2023-09-30', interval =\"60m\")\n%matplotlib inline\n\ndata['Adj Close'].plot()\nplt.ion()\nprint(data)\n\n[*********************100%%**********************]  1 of 1 completed\n                           Open        High         Low       Close  \\\nDatetime                                                              \n2022-01-03 09:30:00  476.299988  477.720001  473.850006  476.750000   \n2022-01-03 10:30:00  476.739990  476.779999  475.049988  475.529999   \n2022-01-03 11:30:00  475.540009  475.994995  474.450012  475.929993   \n2022-01-03 12:30:00  475.929993  476.184998  475.334991  476.060089   \n2022-01-03 13:30:00  476.084991  477.079987  475.869995  476.920013   \n...                         ...         ...         ...         ...   \n2023-09-29 11:30:00  430.000000  430.209503  428.635010  429.410004   \n2023-09-29 12:30:00  429.429993  429.595001  426.500000  427.500000   \n2023-09-29 13:30:00  427.494995  427.679993  426.010010  426.260010   \n2023-09-29 14:30:00  426.269989  428.470001  425.910004  427.579987   \n2023-09-29 15:30:00  427.589996  428.875000  426.739990  427.410004   \n\n                      Adj Close    Volume  \nDatetime                                   \n2022-01-03 09:30:00  476.750000  16733361  \n2022-01-03 10:30:00  475.529999   7596469  \n2022-01-03 11:30:00  475.929993   5689415  \n2022-01-03 12:30:00  476.060089   4203353  \n2022-01-03 13:30:00  476.920013   5747186  \n...                         ...       ...  \n2023-09-29 11:30:00  429.410004   9596312  \n2023-09-29 12:30:00  427.500000  12763406  \n2023-09-29 13:30:00  426.260010  12485095  \n2023-09-29 14:30:00  427.579987  16267060  \n2023-09-29 15:30:00  427.410004  20067751  \n\n[3056 rows x 6 columns]\n\n\n\n\n\nNow we need to split the data.\n\ndata.reset_index(inplace = True)\n\n\ntrain_size = 2400\n\ndata_train = data[:train_size]\ndata_test = data[train_size:]\n\ntest_size = len(data_test)\n\n\ndata_test = data_test[[\"Datetime\", \"Close\"]]\ndata_train = data_train[[\"Datetime\", \"Close\"]]\n\nseriesTrain = data_train.set_index('Datetime')\nseriesTest = data_test.set_index('Datetime')\n\nAttempting to implement with sklearn tscv\n\n\"\"\"\ntscvData = data[[\"Close\"]]\n\n\n# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html\n\ntscv = TimeSeriesSplit(gap=0 max_train_size=None, n_splits=5, test_size=1)\n\nfor i, (train_index, test_index) in enumerate(tscv.split(tscvData)):\n    print(i, \"train: \", train_index, \"test: \", test_index)\n    model = auto_arima(tscvData[train_index])\n    predictions = model.predict(n_periods = 1)\n    print(predictions)\n\"\"\"\n\n'\\ntscvData = data[[\"Close\"]]\\n\\n\\n# https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html\\n\\ntscv = TimeSeriesSplit(gap=0 max_train_size=None, n_splits=5, test_size=1)\\n\\nfor i, (train_index, test_index) in enumerate(tscv.split(tscvData)):\\n    print(i, \"train: \", train_index, \"test: \", test_index)\\n    model = auto_arima(tscvData[train_index])\\n    predictions = model.predict(n_periods = 1)\\n    print(predictions)\\n'\n\n\n\n# Let's reformat the test data into a dataframe we can add our predictions to\n\ntestResultsDF = pd.DataFrame(index = range(test_size))\ntestResultsDF['Price'] = 0\n# Get a clean format for close prices\nfor i in range(0,test_size):\n    testResultsDF['Price'][i] = seriesTest.values[i][0]\n\n\n# Initialize empty cells for the statistical forecasts\ntestResultsDF['auto_arima'] = 0\ntestResultsDF['dyn_theta'] = 0\ntestResultsDF['auto_ets'] = 0\ntestResultsDF['complex_smoothing'] = 0\n\n\ndef crossValidation(train, test, window, outputFrame, modelName, predReturnFunction):\n\n    totalPredictions = pd.Series([])\n    windows = len(test) // window\n\n    predictionIndex = 0\n\n    for i in range(0, windows):\n        # debug\n        print(\"Window: \", i, \"Method: \", modelName)\n\n        # How many observations to move forward each frame\n        addNum = i * window\n        # Combine training data with additional test window\n        intermediateData = pd.concat([train, test[:addNum]])\n        # Generate prediction of the given window size\n        prediction = predReturnFunction(intermediateData, window)\n        print(prediction)\n        # Check if we have multiple predictions in the window\n        if len(prediction) &gt; 1:\n            # Store each predicted value with a loop\n            for j in range(0,window):\n\n                # Store in the prediction-comparison frame\n                outputFrame[modelName][predictionIndex] = prediction[j]\n\n                # Move to next open spot\n                predictionIndex += 1 \n        else:\n            \n            outputFrame[modelName][predictionIndex] = prediction[0]\n            predictionIndex += 1\n\nAnd then we need to train the statistical models\nImport packages\n\nfrom statsforecast import StatsForecast\nfrom statsforecast.models import AutoCES, AutoARIMA, AutoETS, DynamicOptimizedTheta\nimport numpy as np\nimport time\n\nC:\\Users\\corwi\\anaconda3\\Lib\\site-packages\\statsforecast\\core.py:21: TqdmExperimentalWarning:\n\nUsing `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n\n\n\nRun Prediction\n\ndef aaPredFunction(dataIn, windowSize):\n    model = AutoARIMA()\n    fit1 = model.fit(y = np.concatenate(dataIn.to_numpy()))\n    prediction = fit1.predict(h = windowSize)\n    return prediction.get('mean')\n\n\ndef cesPredFunction(dataIn, windowSize):\n    model = AutoCES()\n    fit1 = model.fit(y = np.concatenate(dataIn.to_numpy()))\n    predictionList = fit1.predict(windowSize)\n    return predictionList.get('mean')\n\ndef etsPredFunction(dataIn, windowSize):\n    model = AutoETS()\n    fit1 = model.fit(y = np.concatenate(dataIn.to_numpy()))\n    predictionList = fit1.predict(windowSize)\n    return predictionList.get('mean')\n\ndef dotPredFunction(dataIn, windowSize):\n    model = DynamicOptimizedTheta()\n    fit1 = model.fit(y = np.concatenate(dataIn.to_numpy()))\n    predictionList = fit1.predict(windowSize)\n    return predictionList.get('mean')\n\n\n# Set the number of observations to be included in the test set\ntest_out_size = 40\n\ntempTest = seriesTest[:test_out_size]\n\n# Auto Arima\ncrossValidation(seriesTrain, tempTest, 1, testResultsDF, 'auto_arima', aaPredFunction)\n\ncrossValidation(seriesTrain, tempTest, 1, testResultsDF, 'complex_smoothing', cesPredFunction)\n\ncrossValidation(seriesTrain, tempTest, 1, testResultsDF, 'auto_ets', etsPredFunction)\n\ncrossValidation(seriesTrain, tempTest, 1, testResultsDF, 'dyn_theta', dotPredFunction)\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:3: FutureWarning:\n\nThe default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:31: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:3: FutureWarning:\n\nThe default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:31: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:3: FutureWarning:\n\nThe default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:31: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:3: FutureWarning:\n\nThe default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\2670725450.py:31: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\nWindow:  0 Method:  auto_arima\n[411.29000854]\nWindow:  1 Method:  auto_arima\n[411.70230103]\nWindow:  2 Method:  auto_arima\n[410.25]\nWindow:  3 Method:  auto_arima\n[411.73001099]\nWindow:  4 Method:  auto_arima\n[412.11999512]\nWindow:  5 Method:  auto_arima\n[412.85998535]\nWindow:  6 Method:  auto_arima\n[415.22000122]\nWindow:  7 Method:  auto_arima\n[415.2098999]\nWindow:  8 Method:  auto_arima\n[414.65811157]\nWindow:  9 Method:  auto_arima\n[415.23001099]\nWindow:  10 Method:  auto_arima\n[416.89001465]\nWindow:  11 Method:  auto_arima\n[417.29501343]\nWindow:  12 Method:  auto_arima\n[416.15969849]\nWindow:  13 Method:  auto_arima\n[416.14001465]\nWindow:  14 Method:  auto_arima\n[416.53359985]\nWindow:  15 Method:  auto_arima\n[417.78500366]\nWindow:  16 Method:  auto_arima\n[419.23779297]\nWindow:  17 Method:  auto_arima\n[420.57000732]\nWindow:  18 Method:  auto_arima\n[418.51000977]\nWindow:  19 Method:  auto_arima\n[418.22000122]\nWindow:  20 Method:  auto_arima\n[418.76000977]\nWindow:  21 Method:  auto_arima\n[417.87820435]\nWindow:  22 Method:  auto_arima\n[418.18289185]\nWindow:  23 Method:  auto_arima\n[418.60998535]\nWindow:  24 Method:  auto_arima\n[419.13101196]\nWindow:  25 Method:  auto_arima\n[419.290802]\nWindow:  26 Method:  auto_arima\n[418.89498901]\nWindow:  27 Method:  auto_arima\n[419.11499023]\nWindow:  28 Method:  auto_arima\n[419.69500732]\nWindow:  29 Method:  auto_arima\n[419.04501343]\nWindow:  30 Method:  auto_arima\n[418.76998901]\nWindow:  31 Method:  auto_arima\n[417.73001099]\nWindow:  32 Method:  auto_arima\n[417.88000488]\nWindow:  33 Method:  auto_arima\n[417.23001099]\nWindow:  34 Method:  auto_arima\n[415.79000854]\nWindow:  35 Method:  auto_arima\n[414.34500122]\nWindow:  36 Method:  auto_arima\n[414.75]\nWindow:  37 Method:  auto_arima\n[414.08999634]\nWindow:  38 Method:  auto_arima\n[410.66000366]\nWindow:  39 Method:  auto_arima\n[411.20999146]\nWindow:  0 Method:  complex_smoothing\n[411.31210327]\nWindow:  1 Method:  complex_smoothing\n[411.58743286]\nWindow:  2 Method:  complex_smoothing\n[410.47836304]\nWindow:  3 Method:  complex_smoothing\n[411.44396973]\nWindow:  4 Method:  complex_smoothing\n[411.94665527]\nWindow:  5 Method:  complex_smoothing\n[412.64120483]\nWindow:  6 Method:  complex_smoothing\n[414.6685791]\nWindow:  7 Method:  complex_smoothing\n[415.06469727]\nWindow:  8 Method:  complex_smoothing\n[414.70376587]\nWindow:  9 Method:  complex_smoothing\n[415.08825684]\nWindow:  10 Method:  complex_smoothing\n[416.49438477]\nWindow:  11 Method:  complex_smoothing\n[417.099823]\nWindow:  12 Method:  complex_smoothing\n[416.31307983]\nWindow:  13 Method:  complex_smoothing\n[416.13769531]\nWindow:  14 Method:  complex_smoothing\n[416.41891479]\nWindow:  15 Method:  complex_smoothing\n[417.47741699]\nWindow:  16 Method:  complex_smoothing\n[418.85162354]\nWindow:  17 Method:  complex_smoothing\n[420.19198608]\nWindow:  18 Method:  complex_smoothing\n[418.8114624]\nWindow:  19 Method:  complex_smoothing\n[418.30490112]\nWindow:  20 Method:  complex_smoothing\n[418.6343689]\nWindow:  21 Method:  complex_smoothing\n[417.99539185]\nWindow:  22 Method:  complex_smoothing\n[418.11132812]\nWindow:  23 Method:  complex_smoothing\n[418.47607422]\nWindow:  24 Method:  complex_smoothing\n[418.96533203]\nWindow:  25 Method:  complex_smoothing\n[419.19128418]\nWindow:  26 Method:  complex_smoothing\n[418.91949463]\nWindow:  27 Method:  complex_smoothing\n[419.04171753]\nWindow:  28 Method:  complex_smoothing\n[419.5300293]\nWindow:  29 Method:  complex_smoothing\n[419.1076355]\nWindow:  30 Method:  complex_smoothing\n[418.80297852]\nWindow:  31 Method:  complex_smoothing\n[417.9102478]\nWindow:  32 Method:  complex_smoothing\n[417.85235596]\nWindow:  33 Method:  complex_smoothing\n[417.31808472]\nWindow:  34 Method:  complex_smoothing\n[416.06033325]\nWindow:  35 Method:  complex_smoothing\n[414.65158081]\nWindow:  36 Method:  complex_smoothing\n[414.6947937]\nWindow:  37 Method:  complex_smoothing\n[414.17434692]\nWindow:  38 Method:  complex_smoothing\n[411.32434082]\nWindow:  39 Method:  complex_smoothing\n[411.19592285]\nWindow:  0 Method:  auto_ets\n[411.29003674]\nWindow:  1 Method:  auto_ets\n[411.7022598]\nWindow:  2 Method:  auto_ets\n[410.25014523]\nWindow:  3 Method:  auto_ets\n[411.729863]\nWindow:  4 Method:  auto_ets\n[412.1199561]\nWindow:  5 Method:  auto_ets\n[412.85991135]\nWindow:  6 Method:  auto_ets\n[415.21976521]\nWindow:  7 Method:  auto_ets\n[415.20990089]\nWindow:  8 Method:  auto_ets\n[414.65816675]\nWindow:  9 Method:  auto_ets\n[415.2299538]\nWindow:  10 Method:  auto_ets\n[416.88984864]\nWindow:  11 Method:  auto_ets\n[417.29497291]\nWindow:  12 Method:  auto_ets\n[416.15981201]\nWindow:  13 Method:  auto_ets\n[416.14001663]\nWindow:  14 Method:  auto_ets\n[416.5335605]\nWindow:  15 Method:  auto_ets\n[417.78487852]\nWindow:  16 Method:  auto_ets\n[419.23764768]\nWindow:  17 Method:  auto_ets\n[420.56987409]\nWindow:  18 Method:  auto_ets\n[418.51021575]\nWindow:  19 Method:  auto_ets\n[418.22003024]\nWindow:  20 Method:  auto_ets\n[418.75995577]\nWindow:  21 Method:  auto_ets\n[417.87829252]\nWindow:  22 Method:  auto_ets\n[418.18286139]\nWindow:  23 Method:  auto_ets\n[418.60994264]\nWindow:  24 Method:  auto_ets\n[419.13095986]\nWindow:  25 Method:  auto_ets\n[419.29078602]\nWindow:  26 Method:  auto_ets\n[418.89502859]\nWindow:  27 Method:  auto_ets\n[419.11496824]\nWindow:  28 Method:  auto_ets\n[419.69494932]\nWindow:  29 Method:  auto_ets\n[419.04507842]\nWindow:  30 Method:  auto_ets\n[418.77001652]\nWindow:  31 Method:  auto_ets\n[417.73011499]\nWindow:  32 Method:  auto_ets\n[417.87998989]\nWindow:  33 Method:  auto_ets\n[417.23007598]\nWindow:  34 Method:  auto_ets\n[415.79015255]\nWindow:  35 Method:  auto_ets\n[414.34514574]\nWindow:  36 Method:  auto_ets\n[414.74995951]\nWindow:  37 Method:  auto_ets\n[414.09006233]\nWindow:  38 Method:  auto_ets\n[410.66034667]\nWindow:  39 Method:  auto_ets\n[411.20993649]\nWindow:  0 Method:  dyn_theta\n[411.29284668]\nWindow:  1 Method:  dyn_theta\n[411.69821167]\nWindow:  2 Method:  dyn_theta\n[410.26449585]\nWindow:  3 Method:  dyn_theta\n[411.71536255]\nWindow:  4 Method:  dyn_theta\n[412.11593628]\nWindow:  5 Method:  dyn_theta\n[412.85253906]\nWindow:  6 Method:  dyn_theta\n[415.19631958]\nWindow:  7 Method:  dyn_theta\n[415.20977783]\nWindow:  8 Method:  dyn_theta\n[414.66363525]\nWindow:  9 Method:  dyn_theta\n[415.22433472]\nWindow:  10 Method:  dyn_theta\n[416.87335205]\nWindow:  11 Method:  dyn_theta\n[417.290802]\nWindow:  12 Method:  dyn_theta\n[416.17102051]\nWindow:  13 Method:  dyn_theta\n[416.14031982]\nWindow:  14 Method:  dyn_theta\n[416.52966309]\nWindow:  15 Method:  dyn_theta\n[417.77246094]\nWindow:  16 Method:  dyn_theta\n[419.22314453]\nWindow:  17 Method:  dyn_theta\n[420.55654907]\nWindow:  18 Method:  dyn_theta\n[418.53048706]\nWindow:  19 Method:  dyn_theta\n[418.22311401]\nWindow:  20 Method:  dyn_theta\n[418.75463867]\nWindow:  21 Method:  dyn_theta\n[417.88696289]\nWindow:  22 Method:  dyn_theta\n[418.17993164]\nWindow:  23 Method:  dyn_theta\n[418.60568237]\nWindow:  24 Method:  dyn_theta\n[419.12576294]\nWindow:  25 Method:  dyn_theta\n[419.28915405]\nWindow:  26 Method:  dyn_theta\n[418.89892578]\nWindow:  27 Method:  dyn_theta\n[419.11282349]\nWindow:  28 Method:  dyn_theta\n[419.68917847]\nWindow:  29 Method:  dyn_theta\n[419.05145264]\nWindow:  30 Method:  dyn_theta\n[418.77279663]\nWindow:  31 Method:  dyn_theta\n[417.740448]\nWindow:  32 Method:  dyn_theta\n[417.87860107]\nWindow:  33 Method:  dyn_theta\n[417.23651123]\nWindow:  34 Method:  dyn_theta\n[415.80447388]\nWindow:  35 Method:  dyn_theta\n[414.35958862]\nWindow:  36 Method:  dyn_theta\n[414.74609375]\nWindow:  37 Method:  dyn_theta\n[414.09655762]\nWindow:  38 Method:  dyn_theta\n[410.69436646]\nWindow:  39 Method:  dyn_theta\n[411.20483398]\n\n\nLet’s try and visualize the cross-validated auto-arima performance\n\nprint(testResultsDF)\n\nplot1 = testResultsDF.iloc[0:test_out_size,:]\n\n# get the index as a column for plotting\nplot1 = plot1.reset_index()\n\nplot1 = pd.melt(plot1, id_vars = ['index'], value_vars =  ['auto_arima', 'auto_ets', 'complex_smoothing', 'dyn_theta', 'Price'])\n\nprint(plot1)\n\nsns.lineplot(plot1, x = 'index', y = 'value', hue = 'variable')\n\n          Price  auto_arima   dyn_theta    auto_ets  complex_smoothing\n0    411.702301  411.290009  411.292847  411.290037         411.312103\n1    410.250000  411.702301  411.698212  411.702260         411.587433\n2    411.730011  410.250000  410.264496  410.250145         410.478363\n3    412.119995  411.730011  411.715363  411.729863         411.443970\n4    412.859985  412.119995  412.115936  412.119956         411.946655\n..          ...         ...         ...         ...                ...\n651  429.410004    0.000000    0.000000    0.000000           0.000000\n652  427.500000    0.000000    0.000000    0.000000           0.000000\n653  426.260010    0.000000    0.000000    0.000000           0.000000\n654  427.579987    0.000000    0.000000    0.000000           0.000000\n655  427.410004    0.000000    0.000000    0.000000           0.000000\n\n[656 rows x 5 columns]\n     index    variable       value\n0        0  auto_arima  411.290009\n1        1  auto_arima  411.702301\n2        2  auto_arima  410.250000\n3        3  auto_arima  411.730011\n4        4  auto_arima  412.119995\n..     ...         ...         ...\n195     35       Price  414.750000\n196     36       Price  414.089996\n197     37       Price  410.660004\n198     38       Price  411.209991\n199     39       Price  410.010010\n\n[200 rows x 3 columns]\n\n\n&lt;Axes: xlabel='index', ylabel='value'&gt;\n\n\n\n\n\nLet’s get a more detailed plot of how close each method is at each increment\n\nprint(testResultsDF)\n\nplot2 = testResultsDF.iloc[0:test_out_size,:]\n\nplot2['auto_arima'] = plot2['auto_arima'] - plot2['Price']\nplot2['auto_ets'] = plot2['auto_ets'] - plot2['Price']\nplot2['complex_smoothing'] = plot2['complex_smoothing'] - plot2['Price']\nplot2['dyn_theta'] = plot2['dyn_theta'] - plot2['Price']\n\n\n\n\n\n# get the index as a column for plotting\nplot2 = plot2.reset_index()\n\nerrorDat = plot2.copy()\n\nplot2 = pd.melt(plot2, id_vars = ['index'], value_vars =  ['auto_arima', 'auto_ets', 'complex_smoothing', 'dyn_theta'])\n\nsns.barplot(plot2, x = 'index', y = 'value', hue = 'variable')\n\n          Price  auto_arima   dyn_theta    auto_ets  complex_smoothing\n0    411.702301  411.290009  411.292847  411.290037         411.312103\n1    410.250000  411.702301  411.698212  411.702260         411.587433\n2    411.730011  410.250000  410.264496  410.250145         410.478363\n3    412.119995  411.730011  411.715363  411.729863         411.443970\n4    412.859985  412.119995  412.115936  412.119956         411.946655\n..          ...         ...         ...         ...                ...\n651  429.410004    0.000000    0.000000    0.000000           0.000000\n652  427.500000    0.000000    0.000000    0.000000           0.000000\n653  426.260010    0.000000    0.000000    0.000000           0.000000\n654  427.579987    0.000000    0.000000    0.000000           0.000000\n655  427.410004    0.000000    0.000000    0.000000           0.000000\n\n[656 rows x 5 columns]\n\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\4142167574.py:5: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\4142167574.py:6: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\4142167574.py:7: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\corwi\\AppData\\Local\\Temp\\ipykernel_30724\\4142167574.py:8: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n&lt;Axes: xlabel='index', ylabel='value'&gt;\n\n\n\n\n\nLet’s look at cumulative absolute error of the models, compared to best choice at each time point\n\nerrorDat['optimal'] = 0\n\nfor index in range(0, errorDat.shape[0]):\n    print(index)\n    predictionErrors = errorDat.loc[:,('auto_arima', 'auto_ets', 'dyn_theta', 'complex_smoothing') ]\n    \n    print(predictionErrors.min())\n\n    errorDat.loc[index ,'optimal'] = min(predictionErrors)\n   \nerrorDat\n\n0\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n1\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n2\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n3\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n4\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n5\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n6\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n7\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n8\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n9\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n10\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n11\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n12\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n13\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n14\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n15\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n16\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n17\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n18\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n19\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n20\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n21\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n22\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n23\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n24\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n25\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n26\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n27\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n28\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n29\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n30\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n31\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n32\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n33\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n34\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n35\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n36\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n37\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n38\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n39\nauto_arima          -2.360016\nauto_ets            -2.360090\ndyn_theta           -2.367462\ncomplex_smoothing   -2.578796\ndtype: float64\n\n\n\n\n\n\n\n\n\nindex\nPrice\nauto_arima\ndyn_theta\nauto_ets\ncomplex_smoothing\noptimal\n\n\n\n\n0\n0\n411.702301\n-0.412292\n-0.409454\n-0.412264\n-0.390198\nauto_arima\n\n\n1\n1\n410.250000\n1.452301\n1.448212\n1.452260\n1.337433\nauto_arima\n\n\n2\n2\n411.730011\n-1.480011\n-1.465515\n-1.479866\n-1.251648\nauto_arima\n\n\n3\n3\n412.119995\n-0.389984\n-0.404633\n-0.390132\n-0.676025\nauto_arima\n\n\n4\n4\n412.859985\n-0.739990\n-0.744049\n-0.740029\n-0.913330\nauto_arima\n\n\n5\n5\n415.220001\n-2.360016\n-2.367462\n-2.360090\n-2.578796\nauto_arima\n\n\n6\n6\n415.209900\n0.010101\n-0.013580\n0.009865\n-0.541321\nauto_arima\n\n\n7\n7\n414.658112\n0.551788\n0.551666\n0.551789\n0.406586\nauto_arima\n\n\n8\n8\n415.230011\n-0.571899\n-0.566376\n-0.571844\n-0.526245\nauto_arima\n\n\n9\n9\n416.890015\n-1.660004\n-1.665680\n-1.660061\n-1.801758\nauto_arima\n\n\n10\n10\n417.295013\n-0.404999\n-0.421661\n-0.405165\n-0.800629\nauto_arima\n\n\n11\n11\n416.159698\n1.135315\n1.131104\n1.135274\n0.940125\nauto_arima\n\n\n12\n12\n416.140015\n0.019684\n0.031006\n0.019797\n0.173065\nauto_arima\n\n\n13\n13\n416.533600\n-0.393585\n-0.393280\n-0.393583\n-0.395905\nauto_arima\n\n\n14\n14\n417.785004\n-1.251404\n-1.255341\n-1.251443\n-1.366089\nauto_arima\n\n\n15\n15\n419.237793\n-1.452789\n-1.465332\n-1.452914\n-1.760376\nauto_arima\n\n\n16\n16\n420.570007\n-1.332214\n-1.346863\n-1.332360\n-1.718384\nauto_arima\n\n\n17\n17\n418.510010\n2.059998\n2.046539\n2.059864\n1.681976\nauto_arima\n\n\n18\n18\n418.220001\n0.290009\n0.310486\n0.290215\n0.591461\nauto_arima\n\n\n19\n19\n418.760010\n-0.540009\n-0.536896\n-0.539980\n-0.455109\nauto_arima\n\n\n20\n20\n417.878204\n0.881805\n0.876434\n0.881751\n0.756165\nauto_arima\n\n\n21\n21\n418.182892\n-0.304688\n-0.295929\n-0.304599\n-0.187500\nauto_arima\n\n\n22\n22\n418.609985\n-0.427094\n-0.430054\n-0.427124\n-0.498657\nauto_arima\n\n\n23\n23\n419.131012\n-0.521027\n-0.525330\n-0.521069\n-0.654938\nauto_arima\n\n\n24\n24\n419.290802\n-0.159790\n-0.165039\n-0.159842\n-0.325470\nauto_arima\n\n\n25\n25\n418.894989\n0.395813\n0.394165\n0.395797\n0.296295\nauto_arima\n\n\n26\n26\n419.114990\n-0.220001\n-0.216064\n-0.219962\n-0.195496\nauto_arima\n\n\n27\n27\n419.695007\n-0.580017\n-0.582184\n-0.580039\n-0.653290\nauto_arima\n\n\n28\n28\n419.045013\n0.649994\n0.644165\n0.649936\n0.485016\nauto_arima\n\n\n29\n29\n418.769989\n0.275024\n0.281464\n0.275089\n0.337646\nauto_arima\n\n\n30\n30\n417.730011\n1.039978\n1.042786\n1.040006\n1.072968\nauto_arima\n\n\n31\n31\n417.880005\n-0.149994\n-0.139557\n-0.149890\n0.030243\nauto_arima\n\n\n32\n32\n417.230011\n0.649994\n0.648590\n0.649979\n0.622345\nauto_arima\n\n\n33\n33\n415.790009\n1.440002\n1.446503\n1.440067\n1.528076\nauto_arima\n\n\n34\n34\n414.345001\n1.445007\n1.459473\n1.445151\n1.715332\nauto_arima\n\n\n35\n35\n414.750000\n-0.404999\n-0.390411\n-0.404854\n-0.098419\nauto_arima\n\n\n36\n36\n414.089996\n0.660004\n0.656097\n0.659963\n0.604797\nauto_arima\n\n\n37\n37\n410.660004\n3.429993\n3.436554\n3.430059\n3.514343\nauto_arima\n\n\n38\n38\n411.209991\n-0.549988\n-0.515625\n-0.549645\n0.114349\nauto_arima\n\n\n39\n39\n410.010010\n1.199982\n1.194824\n1.199927\n1.185913\nauto_arima\n\n\n\n\n\n\n\nbackN = 50\nsmallTest = seriesTest[:test_out_size] smallTrain = seriesTrain[-backN:]\nsmallTest[“x”] = range(backN + 1,backN + test_out_size + 1) smallTrain[“x”] = range(1,backN + 1)\n#aaPrediction = pd.Series(aaPrediction) #aaPrediction.index = smallTest.index #aaPrediction = pd.Series(aaPrediction) #aaPrediction.index = smallTest.index aaPrediction2 = pd.DataFrame([float(x) for x in aaPrediction]) aaPrediction2[“x”] = range(backN + 1, backN + test_out_size + 1) aaPrediction2.rename(columns = {0 : “val”, “x”: “x”}, inplace = True ) aaPrediction2 = pd.DataFrame(aaPrediction2)\nprint(aaPrediction)\nplt.figure(figsize= (8,5) ) plt.plot(smallTrain[“x”], smallTrain[“Close”], label = “Training”) plt.plot(smallTest[“x”], smallTest[“Close”], label = “Test”) plt.plot(aaPrediction2[“x”], aaPrediction2[“val”], label = “Auto Arima”) plt.legend(loc = ‘upper left’) plt.show()\nAnd then we can reformat data for NN"
  }
]